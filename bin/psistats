#!/usr/bin/env python
### BEGIN INIT INFO
# Provides: psistats
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5 
# Default-Stop: 1
# Short-Description: Psistats
# Description: Runs the Psistats reporting service
### END INIT INFO

# Author: Alex Dowgailenko <adow@psikon.com>

import sys
import os
import psutil
import time
import stat
from daemon import runner
import sensors

#
# Check if we are being called from an installation
# or not. Probably not the best way to do this.
#
project_root = os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + "/..")
setup_file = project_root + "/setup.py"
psistats_folder = project_root + "/psistats"

if (os.path.isfile(setup_file) and os.path.isdir(psistats_folder)):
    sys.path.insert(0, project_root)

from psistats import app
from psistats import config


def out(msg):
    """
    Ensure messages are printed to stdout immediate"
    """
    sys.stdout.write(msg)
    sys.stdout.flush()


def is_running(pidfile):
    """
    Check if pidfile is a valid process
    """
    try:
        f = open(pidfile)
        pid = f.read()
        if psutil.pid_exists(int(pid)) == True:
            return True
        else:
            return False
    except:
        return False


def start_local():
    """
    Starts psistats in the current terminal
    """
    out('[x] Starting Psistats service locally... ')
    psistats = app.App(config.get_config())
    psistats.run()    
    

def start():
    """
    Starst psistats as a background service"
    """
    out('[x] Starting Psistats service... ')
    psistats = app.App(config.get_config())

    if is_running(psistats.pidfile_path) == True:
        out("Already running!\n")
    else:
        newpid = os.fork()

        if newpid == 0:
            daemon_runner = runner.DaemonRunner(psistats)
            daemon_runner.do_action()

            sys.exit()
        else:
            out("ok\n")

def stop():
    """
    Stop psistats
    """
    out('[x] Stopping Psistats service... ')
    psistats = app.App(config.get_config())

    if (os.path.isfile(psistats.pidfile_path)):

        with open(psistats.pidfile_path) as f:
            pid = int(f.read())

            while True:
                out('.')
                try:
                    os.kill(pid, 9)
                except OSError:
                    pass

                if psutil.pid_exists(pid):
                    time.sleep(1)
                else:
                    break
        out("ok\n")
    else:
        out("ok\n")


def status():
    """
    Check if pidfile is a valid process"
    """
    psistats = app.App(config.get_config())
    if is_running(psistats.pidfile_path) == True:
        print "running"
    else:
        print "not running"

def list_sensors():
    """
    List available sensors in a config file format
    """
    sensors.init()

    try:
        for chip in sensors.iter_detected_chips():
            confKey = str(chip)

            unit = ''

            for feature in chip:
                if feature.type == sensors.SENSORS_FEATURE_FAN:
                    unit = 'RPM'
                elif feature.type == sensors.SENSORS_FEATURE_TEMP:
                    unit = '*C'
                
                print '%s.%s  (%s %s)' % (confKey, feature.label, feature.get_value(), unit)
    finally:
        sensors.cleanup()


retval = 0

if len(sys.argv) != 2:
    print "psistats [start|start-local|top|restart|status|sensors]"
    retval = 1
elif sys.argv[1] == 'start':
    start()
elif sys.argv[1] == 'stop':
    stop()
elif sys.argv[1] == 'restart':
    stop()
    start()
elif sys.argv[1] == 'status':
    status()
elif sys.argv[1] == 'start-local':
    start_local()
elif sys.argv[1] == 'sensors':
    list_sensors()
else:
    print "psistats [start|start-local|stop|restart|status|sensors]"
    retval = 1

sys.exit(retval)

